package com.maxeler.examples.tcpfastpathforwarding;

import com.maxeler.maxblox.statemachine.TieOffNode;
import com.maxeler.maxblox.statemachine.TieOffNode.IOPattern;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationTechnique;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.tcp.fastpath.MaxTcpFastPath;
import com.maxeler.tcp.fastpath.MaxTcpFastPath.ChecksumMode;
import com.maxeler.udp.fastpath.MaxUdpFastPath;
import com.maxeler.udp.fastpath.MaxUdpFastPathConfig;
import com.maxeler.udp.fastpath.MaxUdpMultiRx;


public class TcpFastPathForwardingManager extends NetworkManager {

	public TcpFastPathForwardingManager(EngineParameters configuration) {
		super(configuration);

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(true));

		/*
		 * Multicast feed input
		 */
		Max4NetworkConnection udpConnection = Max4NetworkConnection.QSFP_TOP_10G_PORT1;
		network_config.setEthernetMacType(EthernetMacType.ULTRA_LOW_LATENCY);
		network_config.setEthernetEnableTransmitStoreAndFwd(udpConnection, false);

		MaxUdpFastPathConfig config = new MaxUdpFastPathConfig();
		config.setRxChecksumMode(MaxUdpFastPathConfig.RxChecksumMode.DISABLED);
		MaxUdpMultiRx udpMulticastFeed = MaxUdpFastPath.createMultiRx(this, "UdpMulticastFeed", udpConnection, config);


		/*
		 * Consumer TCP streams
		 */
		Max4NetworkConnection tcpConnection = Max4NetworkConnection.QSFP_BOT_10G_PORT1;
		network_config.setEthernetMacType(EthernetMacType.ULTRA_LOW_LATENCY);

		MaxTcpFastPath consumers = MaxTcpFastPath.create(this, "Consumers", tcpConnection, ChecksumMode.AUTO_CALCULATED);

		ManagerClock netClk = getNetworkClock(Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		pushDefaultClock(netClk);

		/*
		 * Main Kernel
		 */
		KernelBlock k = addKernel(new TcpFastPathForwardingKernel(makeKernelParameters("fwd"), consumers.getSimpleTxLinkType(), udpMulticastFeed.getRxStreamType()));

		k.getInput(TcpFastPathForwardingKernel.INPUT) <== udpMulticastFeed.getRxStream();
		consumers.getTxStream() <== k.getOutput(TcpFastPathForwardingKernel.OUTPUT_CONSUMERS);
		addStreamToCPU("events") <== k.getOutput(TcpFastPathForwardingKernel.OUTPUT_EVENTS_TO_CPU);

		TieOffNode.tieOff(this, consumers.getRxStream(), IOPattern.ADVANCE);
	}

	public static void main(String[] args) {
		TcpFastPathForwardingParameters params = new TcpFastPathForwardingParameters(args);
		TcpFastPathForwardingManager manager = new TcpFastPathForwardingManager(params);

		BuildConfig bc = manager.getBuildConfig();
		bc.setBuildEffort(Effort.VERY_HIGH);
		bc.setOptimizationGoal(OptimizationTechnique.SPEED);
		bc.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		bc.setMPPRParallelism(params.getMPPRThreads());
		bc.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}
